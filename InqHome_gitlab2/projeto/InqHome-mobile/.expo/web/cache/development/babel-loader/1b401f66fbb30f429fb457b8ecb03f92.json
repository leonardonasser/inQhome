{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ADS\\\\InqHome_gitlab2\\\\projeto\\\\InqHome-mobile\\\\src\\\\pages\\\\register\\\\register.js\";\nimport React from 'react';\nimport axios from \"axios\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { Button, TextInput } from 'react-native-paper';\nimport { registerStyle } from \"./registerStyle\";\nimport { Topo } from \"../../components/headerComponent\";\nimport { Formik, Field } from 'formik';\nimport { createGlobalStyle } from 'styled-components';\nimport api from \"../service/api\";\nimport { useNavigation } from '@react-navigation/native';\nimport * as Yup from 'yup';\nexport default function RegisterScreen() {\n  var _this = this;\n\n  var navigation = useNavigation();\n  var validationSchema = Yup.object({\n    nome: Yup.string().trim().min(3, 'Nome invalido!').required('Nome é obrigatório!'),\n    email: Yup.string().email('Email Invalido!').required('Nome é obrigatório!'),\n    senha: Yup.string().trim().min(8, 'Senha está muito curto!').required('Senha é obrigatório!'),\n    senhaConfirm: Yup.string().equals([Yup.ref('senha'), null], 'Senha não corresponde!')\n  });\n  return React.createElement(SafeAreaView, {\n    style: registerStyle.responsive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, React.createElement(Topo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: registerStyle.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      nome: '',\n      email: '',\n      senha: '',\n      senhaConfirm: '',\n      telefone: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      api.post(\"usuario\", values).then(function (response) {\n        navigation.navigate('Login');\n        console.log('Usuario Salvo com sucesso!' + response.data);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, function (props) {\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }\n    }, React.createElement(TextInput, {\n      placeholder: \"Nome\",\n      onChangeText: props.handleChange('nome'),\n      value: props.values.nome,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"Email\",\n      onChangeText: props.handleChange('email'),\n      value: props.values.email,\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"Senha\",\n      onChangeText: props.handleChange('senha'),\n      value: props.values.senha,\n      secureTextEntry: true,\n      right: React.createElement(TextInput.Icon, {\n        name: \"eye-off-outline\",\n        color: registerStyle.icon.color,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 67\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"Confirmar senha\",\n      onChangeText: props.handleChange('senhaConfirm'),\n      value: props.values.senhaConfirm,\n      secureTextEntry: true,\n      right: React.createElement(TextInput.Icon, {\n        name: \"eye-off-outline\",\n        color: registerStyle.icon.color,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 67\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }\n    }), React.createElement(TextInput, {\n      placeholder: \"N\\xFAmero de Telefone\",\n      onChangeText: props.handleChange('telefone'),\n      value: props.values.telefone,\n      keyboardType: \"phone-pad\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }\n    }), React.createElement(Button, {\n      mode: \"contained\",\n      style: registerStyle.button,\n      onPress: props.handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }\n    }, \"Registrar\"));\n  }))));\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/ADS/InqHome_gitlab2/projeto/InqHome-mobile/src/pages/register/register.js"],"names":["React","axios","ScrollView","Button","TextInput","registerStyle","Topo","Formik","Field","createGlobalStyle","api","useNavigation","Yup","RegisterScreen","navigation","validationSchema","object","nome","string","trim","min","required","email","senha","senhaConfirm","equals","ref","responsive","content","telefone","values","post","then","response","navigate","console","log","data","props","handleChange","icon","color","button","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from \"axios\";\r\nimport { SafeAreaView, View } from 'react-native';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport { Button, TextInput } from 'react-native-paper';\r\nimport { registerStyle } from './registerStyle';\r\nimport { Topo } from '../../components/headerComponent';\r\nimport { Formik, Field } from 'formik';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport api from '../service/api';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport * as Yup from 'yup';\r\n\r\nexport default function RegisterScreen() {\r\n  \r\n    const navigation = useNavigation();\r\n    const validationSchema = Yup.object({\r\n         nome: Yup.string()\r\n          .trim()\r\n          .min(3, 'Nome invalido!')\r\n          .required('Nome é obrigatório!'),\r\n        email: Yup.string().email('Email Invalido!').required('Nome é obrigatório!'),\r\n        senha: Yup.string()\r\n          .trim()\r\n          .min(8, 'Senha está muito curto!')\r\n          .required('Senha é obrigatório!'),\r\n          senhaConfirm: Yup.string().equals(\r\n          [Yup.ref('senha'), null],\r\n          'Senha não corresponde!'\r\n        ),\r\n      });\r\n\r\n    return (\r\n        <SafeAreaView style={registerStyle.responsive}>\r\n            <ScrollView>\r\n                <Topo />\r\n                <View style={registerStyle.content}>\r\n                    <Formik\r\n                        initialValues={{\r\n                            nome: '',\r\n                            email: '',\r\n                            senha: '',\r\n                            senhaConfirm: '',\r\n                            telefone: ''\r\n                        }}\r\n                        \r\n                        validationSchema={validationSchema}\r\n\r\n                        onSubmit={(values) => {\r\n\r\n                            api.post(\"usuario\", values).then((response) => {\r\n                                navigation.navigate('Login');\r\n                                console.log('Usuario Salvo com sucesso!' + response.data)\r\n                            });\r\n\r\n                        }}\r\n                    >\r\n\r\n                        {(props) => (\r\n\r\n                            <View>\r\n\r\n                                <TextInput\r\n                                    placeholder='Nome'\r\n                                    onChangeText={props.handleChange('nome')}\r\n                                    value={props.values.nome}\r\n                                />\r\n\r\n\r\n                                <TextInput\r\n                                    placeholder='Email'\r\n                                    onChangeText={props.handleChange('email')}\r\n                                    value={props.values.email}\r\n                                    keyboardType=\"email-address\" />\r\n\r\n\r\n                                <TextInput\r\n                                    placeholder='Senha'\r\n                                    onChangeText={props.handleChange('senha')}\r\n                                    value={props.values.senha}\r\n                                    secureTextEntry={true} right={<TextInput.Icon name=\"eye-off-outline\" color={registerStyle.icon.color} />} />\r\n\r\n\r\n                                <TextInput\r\n                                    placeholder='Confirmar senha'\r\n                                    onChangeText={props.handleChange('senhaConfirm')}\r\n                                    value={props.values.senhaConfirm}\r\n                                    secureTextEntry={true} right={<TextInput.Icon name=\"eye-off-outline\" color={registerStyle.icon.color} />}\r\n                                />\r\n\r\n                                <TextInput\r\n                                    placeholder='Número de Telefone'\r\n                                    onChangeText={props.handleChange('telefone')}\r\n                                    value={props.values.telefone}\r\n                                    keyboardType=\"phone-pad\"\r\n                                />\r\n\r\n\r\n                                <Button mode=\"contained\" style={registerStyle.button} onPress={props.handleSubmit} >Registrar</Button>\r\n\r\n                            </View>\r\n                        )}\r\n\r\n\r\n                    </Formik>\r\n                </View>\r\n            </ScrollView>\r\n        </SafeAreaView>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}